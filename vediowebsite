<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Conference</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="container">
        <div id="videos">
            <video id="localVideo" autoplay muted></video>
            <video id="remoteVideo" autoplay></video>
        </div>
        <div id="chat">
            <div id="chat-window"></div>
            <input type="text" id="chat-input" placeholder="Type a message...">
            <button id="send-button">Send</button>
        </div>
    </div>
    <script src="main.js"></script>
</body>
</html>

#css part


body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

#container {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    padding: 20px;
}

#videos {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

video {
    max-width: 100%;
    border: 1px solid #ccc;
}

#chat {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

#chat-input {
    padding: 5px;
    border: 1px solid #ccc;
}

#send-button {
    padding: 5px 10px;
    background-color: #0074e4;
    color: white;
    border: none;
    cursor: pointer;
}

#main.js

const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const chatInput = document.getElementById('chat-input');
const sendButton = document.getElementById('send-button');
const chatWindow = document.getElementById('chat-window');

// Replace with your video and chat implementation using WebRTC and WebSocket.
// This is a placeholder for video streaming and chat functionality.

// Example: Get user media and display local video
navigator.mediaDevices.getUserMedia({ video: true, audio: true })
    .then((stream) => {
        localVideo.srcObject = stream;
    })
    .catch((error) => {
        console.error('Error accessing camera and microphone:', error);
    });

// Example: Send a chat message
sendButton.addEventListener('click', () => {
    const message = chatInput.value;
    chatInput.value = '';
    displayMessage('You: ' + message);
    
    // Send the message to other participants via WebSocket or other means.
    // You need to implement the server-side logic to handle chat messages.
});

// Example: Receive and display chat messages
function displayMessage(message) {
    const messageElement = document.createElement('div');
    messageElement.textContent = message;
    chatWindow.appendChild(messageElement);
    chatWindow.scrollTop = chatWindow.scrollHeight;
}

// Add WebRTC and WebSocket code to handle video streaming and chat communication.
// This code is just a basic structure for your reference.
